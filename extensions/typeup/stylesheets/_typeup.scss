@import "typeup/settings";
@import "typeup/functions";
@import "modular-scale";

//-----------------------
//
// MIXINS
//
//-----------------------

@mixin typeup-body(
	$fontSize: $fontSize,
	$lineLength: $lineLength,
	$xHeight: $xHeight
) {

	// Convert everything to workable units.
	// Input supports em and px for font size and line length,
	// xHeight is unitless.
	$fontSize: typeup-convertToEms($fontSize, $baseFontSize);

	// Note that when we're stripping units from $fontSize, it's been converted to ems
	$lineLength: typeup-convertToEms($lineLength, $baseFontSize * strip-units($fontSize));
	$xHeight: strip-units($xHeight);

	$typeup-lineHeight: typeup-calcLineHeight($fontSize, $lineLength, $xHeight);

	body {
		line-height: $typeup-lineHeight;
		font-size: $fontSize;
	}

	@include typeup($fontSize, $lineLength, $xHeight);

}

@mixin typeup-container(
	$fontSize: $fontSize,
	$lineLength: $lineLength,
	$xHeight: $xHeight
) {
	// Convert everything to workable units.
	// Input supports em and px for font size and line length,
	// xHeight is unitless.
	$fontSize: typeup-convertToEms($fontSize, $baseFontSize);

	// Note that when we're stripping units from $fontSize, it's been converted to ems
	$lineLength: typeup-convertToEms($lineLength, $baseFontSize * strip-units($fontSize));
	$xHeight: strip-units($xHeight);

	$typeup-lineHeight: typeup-calcLineHeight($fontSize, $lineLength, $xHeight);

	width: $lineLength;
	line-height: $typeup-lineHeight;
	font-size:$fontSize;

	@include typeup($fontSize, $lineLength, $xHeight);

}

@mixin typeup(
	$fontSize: $fontSize,
	$lineLength: $lineLength,
	$xHeight: $xHeight
) {

	$typeup-lineHeight: typeup-calcLineHeight($fontSize, $lineLength, $xHeight);
	$base-size: $fontSize;

	// Loop through heading tags

	@for $i from 1 to 7 {
		h#{$i} {

			// Modular numbers run from 4 at h1 to 1 at h4, and 0 for h5 and h6
			$modularNumber: 5 - $i;
			@if $modularNumber == -1 {
				$modularNumber: 0;
			}

			font-size: ms(#{$modularNumber});

			@include typeup-spacer(
				ms(#{$modularNumber}),

				// These functions don't have any significant logic;
				// they just fetch the correct variable.
				$before: typeup-headingLinesBefore(h#{$i}),
				$after: typeup-headingLinesAfter(h#{$i}),
				$baselineShift: typeup-headingBaselineShift(h#{$i})
			);
		}
	}

	p, ul, ol, pre {
		margin-top:0;
		margin-bottom:$typeup-lineHeight;
	}

	ul, ol {
		padding-left:$typeup-lineHeight;
	}

	pre {
		padding:$typeup-lineHeight;

		code {
			line-height: $typeup-lineHeight;
		}
	}

	code {
		// inline code elements mess up the line-height

		// override this if you want to wrap your inline
		// code with a background, like a pill
		line-height:0;
	}

	blockquote {
		padding: $typeup-lineHeight;
		margin-top: $typeup-lineHeight;
		margin-bottom:$typeup-lineHeight;

		p:last-child {
			margin-bottom:0;
		}
	}

}

@mixin typeup-spacer(
		$size-in-ems,
		$before: $headingLinesBefore,
		$after: $headingLinesAfter,
		$baselineShift: $headingBaselineShift,
		$overrideSpacingWithBaseline: $overrideSpacingWithBaseline
		) {

	@if $overrideSpacingWithBaseline == true {

		// Here spacing is a multiple of the global typeup line-height

		$adjust: 0em;

		// If heading lineheight is not a full baseline height, adjust
		@if (typeup-headingLines($size-in-ems)/1em) % 1 == 0.5 {
			$adjust: (($typeup-lineHeight/ $size-in-ems) / 2) * 1em;
		}

		margin-top:$before * ($typeup-lineHeight / $size-in-ems) * 1em + $adjust;
		margin-bottom: $after * ($typeup-lineHeight / $size-in-ems) * 1em;

	} @else {

		// Here spacing is a multiple of the headings calculated line height.
		// This is recommended.

		// For example, a heading with an absolute line-height of 80px
		// and a $before value of 2 will receive 160px of margin-top

		margin-top: $before * typeup-headingLines($size-in-ems) * ($typeup-lineHeight / $size-in-ems) * 1em;
		margin-bottom: $after * typeup-headingLines($size-in-ems) * ($typeup-lineHeight / $size-in-ems) * 1em;

	}

	position:relative;
	line-height: ($typeup-lineHeight / $size-in-ems) * typeup-headingLines($size-in-ems) * 1em;
	top: 0em - $baselineShift;

}

